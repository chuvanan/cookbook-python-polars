
# First steps with Polars

## Installation

Let's kick off our journey into the world of data manipulation with the Polars library. First things first, we need to [set up a virtual environment](https://realpython.com/python-virtual-environments-a-primer/#how-can-you-work-with-a-python-virtual-environment) for a clean installation. Install the latest stable version with:

```bash
pip install polars
```

Depending on your use case, you might want to install the [optional dependencies](https://docs.pola.rs/user-guide/installation/#feature-flags) as well:

```bash
pip install 'polars[numpy,pandas,pyarrow]'
```

To gain insights into the installed Polars package, including version details and enabled features, utilize the `show_versions()` function:

```{python}
import polars as pl
pl.show_versions()
```


## Initial exploration

For better presentation, this book use Polars' [configuration options](https://docs.pola.rs/py-polars/html/reference/config.html) to adjust the layout of printed tables. Specifically:

- Limit the number of columns and rows displayed in DataFrames to 10 each
- Apply stylish formatting to the tables for pleasant reading experience


```{python}
#| message: false
pl.Config.set_tbl_cols(10)
pl.Config.set_tbl_rows(10)
pl.Config.set_tbl_formatting(rounded_corners=True)
```


### Data loading

Reading a CSV file using Polars is straightforward. Let's take a quick look:

```{python}
flights = pl.read_csv('./data/flights.csv')
```

For those familiar with R's dplyr, a similar method called `glimpse()` is available:

```{python}
# Glimpse the first 10 columns
flights[:,0:10].glimpse()
```

<br/>

Standard commands from pandas such as `head()`, `tail()`, and `describe()` can be used seamlessly:


```{python}
flights.head()
```

```{python}
flights.tail()
```

```{python}
flights.describe()
```

<br/>

If you want to take a peek at different parts of your DataFrame, here's a handy trick: use the `sample()` method. This method
randomly picks `n` number of rows from the DataFrame and returns them for inspection.

```{python}
flights.sample(3)
```

<br/>

The output from Polars comes with some useful features:

* Underneath each column name is a data type.

* No index numbers are present.

* String values are quoted with double quotes.

* Missing values are represented as `null`, applicable to all data types.

### Row and column counting

Determining the number of rows and columns in a Polars DataFrame is as simple as checking the shape:

```{python}
flights.shape
```


### Converting from pandas

Transitioning from a Pandas DataFrame to a Polars DataFrame is effortless with the `from_pandas()` method:

:::{.column-margin}
To clarify, [cheap conversion](https://pythonspeed.com/articles/polars-pandas-interopability/) from Polars to Pandas is achievable given the following prerequisites:

- Pandas version 2.0 or later
- Supported by the `pyarrow` library
:::

```{python}
import pandas as pd
flights2 = pl.from_pandas(pd.read_csv('./data/flights.csv'))

flights2[:,0:9].glimpse()
```

### Understanding data structure

The fundamental data structures in Polars are `Series` and `DataFrames`:

* `Series` is **1-dimensional** data structure, akin to R's atomic vector, where all elements must share the same data type.

```{python}
# Create a named Series
s = pl.Series('a', [1, 2, 3, 2, 5])
s
```


```{python}
# Note that dtype of `s` is automatically inferred as Int64
s.dtype
```

Constructing a Series with a specfic dtype:

```{python}
s2 = pl.Series('a', [1, 2, 3], dtype=pl.Float32)
s2
```


* `Series` provides a wide range of [methods](https://docs.pola.rs/py-Polars/html/reference/series/index.html) for various operations, including standard statistical functions 
like `.max()`, `.mean()`, as well as specialized ones such as `.entropy()` and `.unique_counts()`.

```{python}
print(s.max())
print(s.mean())
```

```{python}
s.unique_counts()
```

* `DataFrames` are 2-dimensional structures, similar to R's `data.frame`, built on top of `Series`. In the examples below, borrowed from [RealPython](https://realpython.com/polars-python/), we create DataFrame using two different approaches:

Creating DataFrame from a dictionary:

```{python}
import numpy as np
num_rows = 5000
rng = np.random.default_rng(seed=7)

buildings_data = {
     "sqft": rng.exponential(scale=1000, size=num_rows),
     "year": rng.integers(low=1995, high=2023, size=num_rows),
     "building_type": rng.choice(["A", "B", "C"], size=num_rows),
 }
buildings = pl.DataFrame(buildings_data)
buildings
```

Creating DataFrame from multiple Series:

```{python}
s1 = pl.Series('sqrf', rng.exponential(scale=1000, size=num_rows))
s2 = pl.Series('year', rng.integers(low=1995, high=2023, size=num_rows))
s3 = pl.Series('building_type', rng.choice(["A", "B", "C"], size=num_rows))

buildings2 = pl.DataFrame([s1, s2, s3])
buildings2
```

<br/>

DataFrames come with several attributes for exploration:

```{python}
# Get rows number
flights.height
```

```{python}
# Get columns number
flights.width
```

```{python}
# Get a list of column names
flights.columns[:10]
```

```{python}
# Get a list of column dtype
flights.dtypes[:10]
```

```{python}
# Get a dict of columns and their dtype
flights[:,:10].schema
```

## Summary

At first glance, Polars offers the ease of use reminiscent of R, blending with the familiarity of pandas (minus any potential frustrations).




