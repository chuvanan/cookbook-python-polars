
# Polars in action

## Why Pandas feels clunky after using R, but Polars doesn't


The initial demonstration of *Polars in action* isn't a real-world scenario but rather a simplified example, deliberately chosen to highlight Polars' fluent API, which,
in my view, resonates with many tidyverse users.

Rasmus Baath, in his insightful [blog post](https://www.sumsar.net/blog/pandas-feels-clunky-when-coming-from-r/), compared the usability of R's `dplyr` and Python's `Pandas` using a simple data
analysis exercise. He argued that Pandas feels *clunky and complicated* compared to the core package of the tidyverse. I found his example to be complelling because I have had the same personal
experience using Pandas for various data tasks at work. 

By borrowing Ramus's case, I aim to showcase Polar's fluent interface which is arguably as *silky smooth* as tidyverse's. While this example carries biased opinion, it 
serves as an useful illustration of what a good API design should look like. Pandas remains an excellent package, but it's important to acknowledge its quirks, especially for newcomers.

### Reading data

:::{.column-screen-inset}

:::: {.columns}

::: {.column width="26%"}


```{r}
#| message: false
# R
require(readr)
purchases = readr::read_csv("./data/purchases.csv")
purchases |> head()
```

:::

::: {.column width="2%"}

:::

::: {.column width="34%"}

```{python}
# Pandas
import pandas as pd
purchases_pd = pd.read_csv("./data/purchases.csv")
purchases_pd.head()
```

:::

::: {.column width="2%"}

:::

::: {.column width="36%"}

```{python}
#| message: false
# Polars
import polars as pl
purchases_pl = pl.read_csv("./data/purchases.csv")
pl.Config.set_tbl_formatting('NOTHING')
pl.Config.set_tbl_hide_column_data_types(True)
print(purchases_pl.head())
```

:::

::::

:::


### “How much do we sell..? Let’s take the total sum!”


:::{.column-screen-inset}

:::: {.columns}

::: {.column width="26%"}

```{r}
# R
purchases$amount |> sum()
```

:::

::: {.column width="2%"}

:::

::: {.column width="34%"}

```{python}
# Pandas
purchases_pd["amount"].sum()
```

:::

::: {.column width="2%"}

:::

::: {.column width="36%"}

```{python}
# Polars
purchases_pl['amount'].sum()
```

:::

::::

:::


### “Ah, they wanted it by country…”



:::{.column-screen-inset}

:::: {.columns}

::: {.column width="26%"}

```{r}
# R
purchases |>
  dplyr::group_by(country) |>
  dplyr::summarize(total = sum(amount))
```

:::

::: {.column width="2%"}

:::

::: {.column width="34%"}

```{python}
# Pandas
(purchases_pd
  .groupby("country")
  .agg(total=("amount", "sum")) 
  .reset_index()                
)
```

:::

::: {.column width="2%"}

:::

::: {.column width="36%"}

```{python}
# Polars
print(purchases_pl
  .group_by('country')
  .agg(pl.col('amount').sum().alias('total'))
  .sort('country')
)
```

:::

::::

:::


### “And I guess I should deduct the discount.”



:::{.column-screen-inset}

:::: {.columns}

::: {.column width="26%"}

```{r}
# R
purchases |> 
  dplyr::group_by(country) |> 
  dplyr::summarize(total = sum(amount - discount))
```

:::

::: {.column width="2%"}

:::

::: {.column width="34%"}

```{python}
#| warning: false
# Pandas
(purchases_pd
  .groupby("country")
  .apply(lambda df: (df["amount"] - df["discount"]).sum())
  .reset_index()
  .rename(columns={0: "total"})                           
)
```

:::

::: {.column width="2%"}

:::

::: {.column width="36%"}

```{python}
# Polars
print(purchases_pl
  .group_by('country')
  .agg(
    (pl.col('amount') - pl.col('discount')).sum().alias('total')
  )
  .sort('country')
)
```

:::

::::

:::


### “Oh, and Maria asked me to remove any outliers.”




:::{.column-screen-inset}

:::: {.columns}

::: {.column width="26%"}

```{r}
# R
purchases |>
  dplyr::filter(amount <= median(amount) * 10) |>
  dplyr::group_by(country) |> 
  dplyr::summarize(total = sum(amount - discount))
```

:::

::: {.column width="2%"}

:::

::: {.column width="34%"}

```{python}
#| warning: false
# Pandas
(purchases_pd
  .query("amount <= amount.median() * 10")
  .groupby("country")
  .apply(lambda df: (df["amount"] - df["discount"]).sum())
  .reset_index()
  .rename(columns={0: "total"})
)
```

:::

::: {.column width="2%"}

:::

::: {.column width="36%"}

```{python}
# Polars
print(purchases_pl
  .filter(
    pl.col('amount') <= (pl.col('amount').median() * 10)
  )
  .group_by('country')
  .agg(
    (pl.col('amount') - pl.col('discount')).sum().alias('total')
  )
  .sort('country')
)
```

:::

::::

:::


### “I probably should use the median within each country”



:::{.column-screen-inset}

:::: {.columns}

::: {.column width="26%"}

```{r}
# R 
purchases |>
  dplyr::group_by(country) |>                     
  dplyr::filter(amount <= median(amount) * 10) |> 
  dplyr::summarize(total = sum(amount - discount))
```

:::

::: {.column width="2%"}

:::

::: {.column width="34%"}

```{python}
#| warning: false
# Pandas
(purchases_pd
  .groupby("country")                                               
  .apply(lambda df: df[df["amount"] <= df["amount"].median() * 10]) 
  .reset_index(drop=True)                                           
  .groupby("country")
  .apply(lambda df: (df["amount"] - df["discount"]).sum())
  .reset_index()
  .rename(columns={0: "total"})
)
```

:::

::: {.column width="2%"}

:::

::: {.column width="36%"}

```{python}
# Polars
print(purchases_pl
  .filter(
    pl.col('amount') <= (pl.col('amount').median().over('country') * 10)
  )
  .group_by('country')
  .agg(
    (pl.col('amount') - pl.col('discount')).sum().alias('total')
  )
  .sort('country')
)
```

:::

::::

:::