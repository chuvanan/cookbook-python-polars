[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Cookbook polars for Python",
    "section": "",
    "text": "Preface\nWelcome to the polars cookbook tailored for R users, including myself. The cookbook aims to assist seasoned R users in enhancing their Python skills in the year 2024.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "first_steps.html",
    "href": "first_steps.html",
    "title": "1  First steps with polars",
    "section": "",
    "text": "1.1 Installation\nLet’s kick off our journey into the world of data manipulation with the polars library. First things first, we need to install polars and set up a virtual environment for a clean installation. Use the following commands:\nTo gain insights into the installed polars package, including version details and enabled features, utilize the build_info() method in Python:\nimport polars as pl\npl.build_info()",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>First steps with polars</span>"
    ]
  },
  {
    "objectID": "first_steps.html#installation",
    "href": "first_steps.html#installation",
    "title": "1  First steps with polars",
    "section": "",
    "text": "# you better setting up a virtual enviroment before \n# installing any python libraries\npip install polars",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>First steps with polars</span>"
    ]
  },
  {
    "objectID": "first_steps.html#initial-exploration",
    "href": "first_steps.html#initial-exploration",
    "title": "1  First steps with polars",
    "section": "1.2 Initial exploration",
    "text": "1.2 Initial exploration\n\n1.2.1 Reading data with polars\nReading a CSV file using polars is not only straightforward but also efficient. Let’s take a quick look:\n\nimport polars as pl\nflights = pl.read_csv('./data/flights.csv')\n\nIf you’re coming from an R background, checking the data types in polars might seem overwhelming due to the numerous available types. Here’s a quick way to inspect them:\n\n# 10 sample columns\nflights[:,0:9].schema\n\nOrderedDict([('Year', Int64),\n             ('Quarter', Int64),\n             ('Month', Int64),\n             ('DayofMonth', Int64),\n             ('DayOfWeek', Int64),\n             ('FlightDate', String),\n             ('Reporting_Airline', String),\n             ('DOT_ID_Reporting_Airline', Int64),\n             ('IATA_CODE_Reporting_Airline', String)])\n\n\nFor those familiar with R’s dplyr, a similar method called glimpse() is available:\n\nflights[:, 0:9].glimpse()\n\nRows: 999\nColumns: 9\n$ Year                        &lt;i64&gt; 2022, 2022, 2022, 2022, 2022, 2022, 2022, 2022, 2022, 2022\n$ Quarter                     &lt;i64&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1\n$ Month                       &lt;i64&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1\n$ DayofMonth                  &lt;i64&gt; 14, 15, 16, 17, 18, 19, 20, 21, 22, 23\n$ DayOfWeek                   &lt;i64&gt; 5, 6, 7, 1, 2, 3, 4, 5, 6, 7\n$ FlightDate                  &lt;str&gt; '2022-01-14', '2022-01-15', '2022-01-16', '2022-01-17', '2022-01-18', '2022-01-19', '2022-01-20', '2022-01-21', '2022-01-22', '2022-01-23'\n$ Reporting_Airline           &lt;str&gt; 'YX', 'YX', 'YX', 'YX', 'YX', 'YX', 'YX', 'YX', 'YX', 'YX'\n$ DOT_ID_Reporting_Airline    &lt;i64&gt; 20452, 20452, 20452, 20452, 20452, 20452, 20452, 20452, 20452, 20452\n$ IATA_CODE_Reporting_Airline &lt;str&gt; 'YX', 'YX', 'YX', 'YX', 'YX', 'YX', 'YX', 'YX', 'YX', 'YX'\n\n\n\nStandard commands from pandas such as head(), tail(), and describe() can be used seamlessly:\n\nflights[:, 0:9].head()\n\n\nshape: (5, 9)\n\n\n\nYear\nQuarter\nMonth\nDayofMonth\nDayOfWeek\nFlightDate\nReporting_Airline\nDOT_ID_Reporting_Airline\nIATA_CODE_Reporting_Airline\n\n\ni64\ni64\ni64\ni64\ni64\nstr\nstr\ni64\nstr\n\n\n\n\n2022\n1\n1\n14\n5\n\"2022-01-14\"\n\"YX\"\n20452\n\"YX\"\n\n\n2022\n1\n1\n15\n6\n\"2022-01-15\"\n\"YX\"\n20452\n\"YX\"\n\n\n2022\n1\n1\n16\n7\n\"2022-01-16\"\n\"YX\"\n20452\n\"YX\"\n\n\n2022\n1\n1\n17\n1\n\"2022-01-17\"\n\"YX\"\n20452\n\"YX\"\n\n\n2022\n1\n1\n18\n2\n\"2022-01-18\"\n\"YX\"\n20452\n\"YX\"\n\n\n\n\n\n\n\nflights[:, 0:9].tail()\n\n\nshape: (5, 9)\n\n\n\nYear\nQuarter\nMonth\nDayofMonth\nDayOfWeek\nFlightDate\nReporting_Airline\nDOT_ID_Reporting_Airline\nIATA_CODE_Reporting_Airline\n\n\ni64\ni64\ni64\ni64\ni64\nstr\nstr\ni64\nstr\n\n\n\n\n2022\n1\n1\n12\n3\n\"2022-01-12\"\n\"YX\"\n20452\n\"YX\"\n\n\n2022\n1\n1\n13\n4\n\"2022-01-13\"\n\"YX\"\n20452\n\"YX\"\n\n\n2022\n1\n1\n14\n5\n\"2022-01-14\"\n\"YX\"\n20452\n\"YX\"\n\n\n2022\n1\n1\n17\n1\n\"2022-01-17\"\n\"YX\"\n20452\n\"YX\"\n\n\n2022\n1\n1\n18\n2\n\"2022-01-18\"\n\"YX\"\n20452\n\"YX\"\n\n\n\n\n\n\n\nflights[:, 0:9].describe()\n\n\nshape: (9, 10)\n\n\n\nstatistic\nYear\nQuarter\nMonth\nDayofMonth\nDayOfWeek\nFlightDate\nReporting_Airline\nDOT_ID_Reporting_Airline\nIATA_CODE_Reporting_Airline\n\n\nstr\nf64\nf64\nf64\nf64\nf64\nstr\nstr\nf64\nstr\n\n\n\n\n\"count\"\n999.0\n999.0\n999.0\n999.0\n999.0\n\"999\"\n\"999\"\n999.0\n\"999\"\n\n\n\"null_count\"\n0.0\n0.0\n0.0\n0.0\n0.0\n\"0\"\n\"0\"\n0.0\n\"0\"\n\n\n\"mean\"\n2022.0\n1.0\n1.0\n16.2002\n3.934935\nnull\nnull\n20452.0\nnull\n\n\n\"std\"\n0.0\n0.0\n0.0\n8.802666\n2.058944\nnull\nnull\n0.0\nnull\n\n\n\"min\"\n2022.0\n1.0\n1.0\n1.0\n1.0\n\"2022-01-01\"\n\"YX\"\n20452.0\n\"YX\"\n\n\n\"25%\"\n2022.0\n1.0\n1.0\n9.0\n2.0\nnull\nnull\n20452.0\nnull\n\n\n\"50%\"\n2022.0\n1.0\n1.0\n16.0\n4.0\nnull\nnull\n20452.0\nnull\n\n\n\"75%\"\n2022.0\n1.0\n1.0\n24.0\n6.0\nnull\nnull\n20452.0\nnull\n\n\n\"max\"\n2022.0\n1.0\n1.0\n31.0\n7.0\n\"2022-01-31\"\n\"YX\"\n20452.0\n\"YX\"\n\n\n\n\n\n\n\n\n1.2.2 Row and column counting\nDetermining the number of rows and columns in a polars DataFrame is as simple as checking the shape:\n\nflights.shape\n\n(999, 110)\n\n\nThe output from polars comes with some useful features:\n\nUnderneath each column name is a data type.\nNo index numbers are present.\nString values are quoted with double quotes.\nMissing values are represented as null, applicable to all data types.\n\n\n\n1.2.3 Converting from pandas\nTransitioning from a Pandas DataFrame to a polars DataFrame is effortless with the from_pandas() method:\n\nimport pandas as pd\nflights2 = pl.from_pandas(pd.read_csv('./data/flights.csv'))\n\nflights2[:,0:9].glimpse()\n\nRows: 999\nColumns: 9\n$ Year                        &lt;i64&gt; 2022, 2022, 2022, 2022, 2022, 2022, 2022, 2022, 2022, 2022\n$ Quarter                     &lt;i64&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1\n$ Month                       &lt;i64&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1\n$ DayofMonth                  &lt;i64&gt; 14, 15, 16, 17, 18, 19, 20, 21, 22, 23\n$ DayOfWeek                   &lt;i64&gt; 5, 6, 7, 1, 2, 3, 4, 5, 6, 7\n$ FlightDate                  &lt;str&gt; '2022-01-14', '2022-01-15', '2022-01-16', '2022-01-17', '2022-01-18', '2022-01-19', '2022-01-20', '2022-01-21', '2022-01-22', '2022-01-23'\n$ Reporting_Airline           &lt;str&gt; 'YX', 'YX', 'YX', 'YX', 'YX', 'YX', 'YX', 'YX', 'YX', 'YX'\n$ DOT_ID_Reporting_Airline    &lt;i64&gt; 20452, 20452, 20452, 20452, 20452, 20452, 20452, 20452, 20452, 20452\n$ IATA_CODE_Reporting_Airline &lt;str&gt; 'YX', 'YX', 'YX', 'YX', 'YX', 'YX', 'YX', 'YX', 'YX', 'YX'\n\n\n\n\n\n1.2.4 Understanding data structure\nThe fundamental data structures in polars are Series and DataFrames:\n\nSeries is 1-dimensional data structure, akin to R’s atomic vector, where all elements must share the same data type.\n\n\ns = pl.Series('a', [1, 2, 3])\nprint(s)\n\nshape: (3,)\nSeries: 'a' [i64]\n[\n    1\n    2\n    3\n]\n\n\n\ns.dtype\n\nInt64\n\n\n\nSeries supports various methods, including operations like finding the maximum or calculating the mean.\n\n\ns.max()\n\n3\n\n\n\ns.mean()\n\n2.0\n\n\n\nDataFrames are 2-dimensional structures backed by Series, similar to R’s data.frame. They come with several attributes for exploration:\n\n\nflights.columns\nflights.dtypes\nflights.height\nflights.width\nflights.schema\nflights.shape\nflights[:,0:9].flags\n\n{'Year': {'SORTED_ASC': False, 'SORTED_DESC': False},\n 'Quarter': {'SORTED_ASC': False, 'SORTED_DESC': False},\n 'Month': {'SORTED_ASC': False, 'SORTED_DESC': False},\n 'DayofMonth': {'SORTED_ASC': False, 'SORTED_DESC': False},\n 'DayOfWeek': {'SORTED_ASC': False, 'SORTED_DESC': False},\n 'FlightDate': {'SORTED_ASC': False, 'SORTED_DESC': False},\n 'Reporting_Airline': {'SORTED_ASC': False, 'SORTED_DESC': False},\n 'DOT_ID_Reporting_Airline': {'SORTED_ASC': False, 'SORTED_DESC': False},\n 'IATA_CODE_Reporting_Airline': {'SORTED_ASC': False, 'SORTED_DESC': False}}",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>First steps with polars</span>"
    ]
  },
  {
    "objectID": "first_steps.html#summary",
    "href": "first_steps.html#summary",
    "title": "1  First steps with polars",
    "section": "1.3 Summary",
    "text": "1.3 Summary\nAt first glance, polars offers the ease of use reminiscent of R, blending with the familiarity of pandas (minus any potential frustrations).",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>First steps with polars</span>"
    ]
  },
  {
    "objectID": "data_manipulation.html",
    "href": "data_manipulation.html",
    "title": "2  Data manipulation",
    "section": "",
    "text": "2.1 Data type conversion\nIn R, you work with four main types of vectors: logical, integer, double, and character. When you mix different types, they get automatically adjusted in a specific order: character → double → integer → logical. If you want to intentionally adjust them, you can use functions like as.integer(), as.double(), as.logical(), and as.character().\nOn the other hand, in polars, there’s a wider variety of data types, and you need to purposefully adjust them when needed.\nfull_flights['Year'].dtype\n\nInt64\nfull_flights = full_flights.with_columns(\n    pl.col('Year').cast(pl.Utf8)\n)\nfull_flights['Year'].dtype\n\nString",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data manipulation</span>"
    ]
  },
  {
    "objectID": "data_manipulation.html#introduction-to-methods",
    "href": "data_manipulation.html#introduction-to-methods",
    "title": "2  Data manipulation",
    "section": "2.2 Introduction to methods",
    "text": "2.2 Introduction to methods",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data manipulation</span>"
    ]
  },
  {
    "objectID": "data_manipulation.html#filtering-rows",
    "href": "data_manipulation.html#filtering-rows",
    "title": "2  Data manipulation",
    "section": "2.3 Filtering rows",
    "text": "2.3 Filtering rows\n\nRetrieving all flights from Oihio (filtering based on one condition)\n\n\n# recommended way\nflights_from_ohio = full_flights.filter(pl.col('OriginStateName') == 'Ohio')\n\n# alternative way (not recommended)\n# flights_from_ohio = full_flights[full_flights['OriginStateName'] == 'Ohio']\n\nflights_from_ohio['OriginStateName'].value_counts()\n\n\nshape: (1, 2)\n\n\n\nOriginStateName\ncount\n\n\nstr\nu32\n\n\n\n\n\"Ohio\"\n7434\n\n\n\n\n\n\n\nObtaining all flights from Ohio to Virginia (filtering based on multiple conditions)\n\n\n# note that each predicate must be enclosed within parentheses\nflights_from_ohio_to_virginia = full_flights.filter(\n    (pl.col('OriginStateName') == 'Ohio') & (pl.col('DestStateName') == 'Virginia')\n)\n\n# you can replace `&` with `,` to avoid parentheses\n# flights_from_ohio_to_virginia = full_flights.filter(\n#     pl.col('OriginStateName') == 'Ohio', \n#     pl.col('DestStateName') == 'Virginia'\n# )\n\nflights_from_ohio_to_virginia['DestStateName'].value_counts()\n\n\nshape: (1, 2)\n\n\n\nDestStateName\ncount\n\n\nstr\nu32\n\n\n\n\n\"Virginia\"\n564\n\n\n\n\n\n\n\nFetching all flights from Ohito to any state except Virginia (filtering based on negative condition)\n\n\nflights_from_ohio_except_to_virginia = full_flights.filter(\n    pl.col('OriginStateName') == 'Ohio', \n    ~(pl.col('DestStateName') == 'Virginia')\n)\nflights_from_ohio_except_to_virginia['DestStateName'].value_counts(sort=True).head()\n\n\nshape: (5, 2)\n\n\n\nDestStateName\ncount\n\n\nstr\nu32\n\n\n\n\n\"Florida\"\n1349\n\n\n\"New York\"\n988\n\n\n\"Illinois\"\n617\n\n\n\"North Carolina…\n564\n\n\n\"Georgia\"\n526\n\n\n\n\n\n\n\nWhy using the .filter() method? The reason is to leverage lazy execution and query optimization\n\n\n%%time\n# this code is optimized by polars query engine before reading any data into memory\nlazy_stmt = (\n    pl.scan_csv('./data/On_Time_Reporting_Carrier_On_Time_Performance_(1987_present)_2022_1.csv')\n    .filter(pl.col('OriginStateName') == 'Ohio')\n    .collect()\n)\n\nCPU times: user 3.24 s, sys: 366 ms, total: 3.61 s\nWall time: 484 ms\n\n\n\n%%time\neager_stmt = (\n    pl.read_csv('./data/On_Time_Reporting_Carrier_On_Time_Performance_(1987_present)_2022_1.csv')\n    .filter(pl.col('OriginStateName') == 'Ohio')\n)\n\nCPU times: user 3.68 s, sys: 670 ms, total: 4.35 s\nWall time: 631 ms",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data manipulation</span>"
    ]
  },
  {
    "objectID": "data_manipulation.html#select-columns",
    "href": "data_manipulation.html#select-columns",
    "title": "2  Data manipulation",
    "section": "2.4 Select columns",
    "text": "2.4 Select columns",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data manipulation</span>"
    ]
  },
  {
    "objectID": "data_manipulation.html#modifyadd-column",
    "href": "data_manipulation.html#modifyadd-column",
    "title": "2  Data manipulation",
    "section": "2.5 Modify/Add column",
    "text": "2.5 Modify/Add column",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data manipulation</span>"
    ]
  },
  {
    "objectID": "data_manipulation.html#rename-column",
    "href": "data_manipulation.html#rename-column",
    "title": "2  Data manipulation",
    "section": "2.6 Rename column",
    "text": "2.6 Rename column",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data manipulation</span>"
    ]
  },
  {
    "objectID": "data_manipulation.html#remove-column",
    "href": "data_manipulation.html#remove-column",
    "title": "2  Data manipulation",
    "section": "2.7 Remove column",
    "text": "2.7 Remove column",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data manipulation</span>"
    ]
  },
  {
    "objectID": "data_manipulation.html#aggregation-by-group",
    "href": "data_manipulation.html#aggregation-by-group",
    "title": "2  Data manipulation",
    "section": "2.8 Aggregation by group",
    "text": "2.8 Aggregation by group",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data manipulation</span>"
    ]
  },
  {
    "objectID": "data_manipulation.html#sort-a-dataframe",
    "href": "data_manipulation.html#sort-a-dataframe",
    "title": "2  Data manipulation",
    "section": "2.9 Sort a DataFrame",
    "text": "2.9 Sort a DataFrame",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data manipulation</span>"
    ]
  },
  {
    "objectID": "data_manipulation.html#join-dataframes",
    "href": "data_manipulation.html#join-dataframes",
    "title": "2  Data manipulation",
    "section": "2.10 Join DataFrames",
    "text": "2.10 Join DataFrames",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data manipulation</span>"
    ]
  },
  {
    "objectID": "data_manipulation.html#concatenate-dataframes",
    "href": "data_manipulation.html#concatenate-dataframes",
    "title": "2  Data manipulation",
    "section": "2.11 Concatenate DataFrames",
    "text": "2.11 Concatenate DataFrames",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data manipulation</span>"
    ]
  },
  {
    "objectID": "data_manipulation.html#pivot-a-dataframe",
    "href": "data_manipulation.html#pivot-a-dataframe",
    "title": "2  Data manipulation",
    "section": "2.12 Pivot a DataFrame",
    "text": "2.12 Pivot a DataFrame",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data manipulation</span>"
    ]
  },
  {
    "objectID": "data_manipulation.html#dealing-with-missing-values",
    "href": "data_manipulation.html#dealing-with-missing-values",
    "title": "2  Data manipulation",
    "section": "2.13 Dealing with missing values",
    "text": "2.13 Dealing with missing values",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data manipulation</span>"
    ]
  },
  {
    "objectID": "data_manipulation.html#other-useful-methods",
    "href": "data_manipulation.html#other-useful-methods",
    "title": "2  Data manipulation",
    "section": "2.14 Other useful methods",
    "text": "2.14 Other useful methods",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data manipulation</span>"
    ]
  },
  {
    "objectID": "data_manipulation.html#strings-methods",
    "href": "data_manipulation.html#strings-methods",
    "title": "2  Data manipulation",
    "section": "2.15 Strings methods",
    "text": "2.15 Strings methods",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data manipulation</span>"
    ]
  },
  {
    "objectID": "data_manipulation.html#handling-datetime",
    "href": "data_manipulation.html#handling-datetime",
    "title": "2  Data manipulation",
    "section": "2.16 Handling datetime",
    "text": "2.16 Handling datetime\nme’].value_counts() ```",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data manipulation</span>"
    ]
  },
  {
    "objectID": "data_manipulation.html#select-columns-1",
    "href": "data_manipulation.html#select-columns-1",
    "title": "2  Data manipulation",
    "section": "2.17 Select columns",
    "text": "2.17 Select columns",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data manipulation</span>"
    ]
  },
  {
    "objectID": "data_manipulation.html#modifyadd-column-1",
    "href": "data_manipulation.html#modifyadd-column-1",
    "title": "2  Data manipulation",
    "section": "2.18 Modify/Add column",
    "text": "2.18 Modify/Add column",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data manipulation</span>"
    ]
  },
  {
    "objectID": "data_manipulation.html#rename-column-1",
    "href": "data_manipulation.html#rename-column-1",
    "title": "2  Data manipulation",
    "section": "2.19 Rename column",
    "text": "2.19 Rename column",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data manipulation</span>"
    ]
  },
  {
    "objectID": "data_manipulation.html#remove-column-1",
    "href": "data_manipulation.html#remove-column-1",
    "title": "2  Data manipulation",
    "section": "2.20 Remove column",
    "text": "2.20 Remove column",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data manipulation</span>"
    ]
  },
  {
    "objectID": "data_manipulation.html#aggregation-by-group-1",
    "href": "data_manipulation.html#aggregation-by-group-1",
    "title": "2  Data manipulation",
    "section": "2.21 Aggregation by group",
    "text": "2.21 Aggregation by group",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data manipulation</span>"
    ]
  },
  {
    "objectID": "data_manipulation.html#sort-a-dataframe-1",
    "href": "data_manipulation.html#sort-a-dataframe-1",
    "title": "2  Data manipulation",
    "section": "2.22 Sort a DataFrame",
    "text": "2.22 Sort a DataFrame",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data manipulation</span>"
    ]
  },
  {
    "objectID": "data_manipulation.html#join-dataframes-1",
    "href": "data_manipulation.html#join-dataframes-1",
    "title": "2  Data manipulation",
    "section": "2.23 Join DataFrames",
    "text": "2.23 Join DataFrames",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data manipulation</span>"
    ]
  },
  {
    "objectID": "data_manipulation.html#concatenate-dataframes-1",
    "href": "data_manipulation.html#concatenate-dataframes-1",
    "title": "2  Data manipulation",
    "section": "2.24 Concatenate DataFrames",
    "text": "2.24 Concatenate DataFrames",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data manipulation</span>"
    ]
  },
  {
    "objectID": "data_manipulation.html#pivot-a-dataframe-1",
    "href": "data_manipulation.html#pivot-a-dataframe-1",
    "title": "2  Data manipulation",
    "section": "2.25 Pivot a DataFrame",
    "text": "2.25 Pivot a DataFrame",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data manipulation</span>"
    ]
  },
  {
    "objectID": "data_manipulation.html#dealing-with-missing-values-1",
    "href": "data_manipulation.html#dealing-with-missing-values-1",
    "title": "2  Data manipulation",
    "section": "2.26 Dealing with missing values",
    "text": "2.26 Dealing with missing values",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data manipulation</span>"
    ]
  },
  {
    "objectID": "data_manipulation.html#other-useful-methods-1",
    "href": "data_manipulation.html#other-useful-methods-1",
    "title": "2  Data manipulation",
    "section": "2.27 Other useful methods",
    "text": "2.27 Other useful methods",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data manipulation</span>"
    ]
  },
  {
    "objectID": "data_manipulation.html#strings-methods-1",
    "href": "data_manipulation.html#strings-methods-1",
    "title": "2  Data manipulation",
    "section": "2.28 Strings methods",
    "text": "2.28 Strings methods",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data manipulation</span>"
    ]
  },
  {
    "objectID": "data_manipulation.html#handling-datetime-1",
    "href": "data_manipulation.html#handling-datetime-1",
    "title": "2  Data manipulation",
    "section": "2.29 Handling datetime",
    "text": "2.29 Handling datetime",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data manipulation</span>"
    ]
  }
]