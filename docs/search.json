[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Python’s polars cookbook for tidyverse users",
    "section": "",
    "text": "Preface\nThis book was initially inspired by a post written by Emily Riederer which recommended a set of Python ergonomic tool for R users.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "index.html#run-the-code-from-this-book",
    "href": "index.html#run-the-code-from-this-book",
    "title": "Python’s polars cookbook for tidyverse users",
    "section": "Run the code from this book",
    "text": "Run the code from this book\n\nClone the book repository:\n\ngit clone https://github.com/chuvanan/cookbook-python-polars.git python-polars-cookbook\ncd python-polars-cookbook\npython3 -m venv env\nsource env/bin/activate\n\nYou can install the exact packages that the book uses with the requirements.txt file:\n\npython3 -m pip install -r requirements.txt\n\nDownload the data (source: Reporting carrier on-time performance)\n\npython download-data.py",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "index.html#what-is-polars",
    "href": "index.html#what-is-polars",
    "title": "Python’s polars cookbook for tidyverse users",
    "section": "What is polars?",
    "text": "What is polars?\n\nA query engine (writtern in Rust) with a DataFrame front-end",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "index.html#who-is-this-for",
    "href": "index.html#who-is-this-for",
    "title": "Python’s polars cookbook for tidyverse users",
    "section": "Who is this for?",
    "text": "Who is this for?\nAs stated in the title, this book is an introduction to polars library for R’s tidyverse users.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "index.html#contributing",
    "href": "index.html#contributing",
    "title": "Python’s polars cookbook for tidyverse users",
    "section": "Contributing",
    "text": "Contributing\nFeel free to open an issue if you notice any problems with this book. It’s free and open source, and your feedback is valuable to me.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "first_steps.html",
    "href": "first_steps.html",
    "title": "1  First steps with polars",
    "section": "",
    "text": "1.1 Installation\nLet’s kick off our journey into the world of data manipulation with the polars library. First things first, we need to install polars and set up a virtual environment for a clean installation. Use the following commands:\nTo gain insights into the installed polars package, including version details and enabled features, utilize the build_info() method in Python:\nimport polars as pl\npl.build_info()",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>First steps with polars</span>"
    ]
  },
  {
    "objectID": "first_steps.html#installation",
    "href": "first_steps.html#installation",
    "title": "1  First steps with polars",
    "section": "",
    "text": "# you better setting up a virtual enviroment before \n# installing any python libraries\npip install polars",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>First steps with polars</span>"
    ]
  },
  {
    "objectID": "first_steps.html#initial-exploration",
    "href": "first_steps.html#initial-exploration",
    "title": "1  First steps with polars",
    "section": "1.2 Initial exploration",
    "text": "1.2 Initial exploration\n\n1.2.1 Reading data with polars\nReading a CSV file using polars is not only straightforward but also efficient. Let’s take a quick look:\n\nimport polars as pl\nflights = pl.read_csv('./data/flights.csv')\n\nIf you’re coming from an R background, checking the data types in polars might seem overwhelming due to the numerous available types. Here’s a quick way to inspect them:\n\n# 10 sample columns\nflights[:,0:9].schema\n\nOrderedDict([('Year', Int64),\n             ('Quarter', Int64),\n             ('Month', Int64),\n             ('DayofMonth', Int64),\n             ('DayOfWeek', Int64),\n             ('FlightDate', String),\n             ('Reporting_Airline', String),\n             ('DOT_ID_Reporting_Airline', Int64),\n             ('IATA_CODE_Reporting_Airline', String)])\n\n\nFor those familiar with R’s dplyr, a similar method called glimpse() is available:\n\nflights[:, 0:9].glimpse()\n\nRows: 999\nColumns: 9\n$ Year                        &lt;i64&gt; 2022, 2022, 2022, 2022, 2022, 2022, 2022, 2022, 2022, 2022\n$ Quarter                     &lt;i64&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1\n$ Month                       &lt;i64&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1\n$ DayofMonth                  &lt;i64&gt; 14, 15, 16, 17, 18, 19, 20, 21, 22, 23\n$ DayOfWeek                   &lt;i64&gt; 5, 6, 7, 1, 2, 3, 4, 5, 6, 7\n$ FlightDate                  &lt;str&gt; '2022-01-14', '2022-01-15', '2022-01-16', '2022-01-17', '2022-01-18', '2022-01-19', '2022-01-20', '2022-01-21', '2022-01-22', '2022-01-23'\n$ Reporting_Airline           &lt;str&gt; 'YX', 'YX', 'YX', 'YX', 'YX', 'YX', 'YX', 'YX', 'YX', 'YX'\n$ DOT_ID_Reporting_Airline    &lt;i64&gt; 20452, 20452, 20452, 20452, 20452, 20452, 20452, 20452, 20452, 20452\n$ IATA_CODE_Reporting_Airline &lt;str&gt; 'YX', 'YX', 'YX', 'YX', 'YX', 'YX', 'YX', 'YX', 'YX', 'YX'\n\n\n\nStandard commands from pandas such as head(), tail(), and describe() can be used seamlessly:\n\nflights[:, 0:9].head()\n\n\nshape: (5, 9)\n\n\n\nYear\nQuarter\nMonth\nDayofMonth\nDayOfWeek\nFlightDate\nReporting_Airline\nDOT_ID_Reporting_Airline\nIATA_CODE_Reporting_Airline\n\n\ni64\ni64\ni64\ni64\ni64\nstr\nstr\ni64\nstr\n\n\n\n\n2022\n1\n1\n14\n5\n\"2022-01-14\"\n\"YX\"\n20452\n\"YX\"\n\n\n2022\n1\n1\n15\n6\n\"2022-01-15\"\n\"YX\"\n20452\n\"YX\"\n\n\n2022\n1\n1\n16\n7\n\"2022-01-16\"\n\"YX\"\n20452\n\"YX\"\n\n\n2022\n1\n1\n17\n1\n\"2022-01-17\"\n\"YX\"\n20452\n\"YX\"\n\n\n2022\n1\n1\n18\n2\n\"2022-01-18\"\n\"YX\"\n20452\n\"YX\"\n\n\n\n\n\n\n\nflights[:, 0:9].tail()\n\n\nshape: (5, 9)\n\n\n\nYear\nQuarter\nMonth\nDayofMonth\nDayOfWeek\nFlightDate\nReporting_Airline\nDOT_ID_Reporting_Airline\nIATA_CODE_Reporting_Airline\n\n\ni64\ni64\ni64\ni64\ni64\nstr\nstr\ni64\nstr\n\n\n\n\n2022\n1\n1\n12\n3\n\"2022-01-12\"\n\"YX\"\n20452\n\"YX\"\n\n\n2022\n1\n1\n13\n4\n\"2022-01-13\"\n\"YX\"\n20452\n\"YX\"\n\n\n2022\n1\n1\n14\n5\n\"2022-01-14\"\n\"YX\"\n20452\n\"YX\"\n\n\n2022\n1\n1\n17\n1\n\"2022-01-17\"\n\"YX\"\n20452\n\"YX\"\n\n\n2022\n1\n1\n18\n2\n\"2022-01-18\"\n\"YX\"\n20452\n\"YX\"\n\n\n\n\n\n\n\nflights[:, 0:9].describe()\n\n\nshape: (9, 10)\n\n\n\nstatistic\nYear\nQuarter\nMonth\nDayofMonth\nDayOfWeek\nFlightDate\nReporting_Airline\nDOT_ID_Reporting_Airline\nIATA_CODE_Reporting_Airline\n\n\nstr\nf64\nf64\nf64\nf64\nf64\nstr\nstr\nf64\nstr\n\n\n\n\n\"count\"\n999.0\n999.0\n999.0\n999.0\n999.0\n\"999\"\n\"999\"\n999.0\n\"999\"\n\n\n\"null_count\"\n0.0\n0.0\n0.0\n0.0\n0.0\n\"0\"\n\"0\"\n0.0\n\"0\"\n\n\n\"mean\"\n2022.0\n1.0\n1.0\n16.2002\n3.934935\nnull\nnull\n20452.0\nnull\n\n\n\"std\"\n0.0\n0.0\n0.0\n8.802666\n2.058944\nnull\nnull\n0.0\nnull\n\n\n\"min\"\n2022.0\n1.0\n1.0\n1.0\n1.0\n\"2022-01-01\"\n\"YX\"\n20452.0\n\"YX\"\n\n\n\"25%\"\n2022.0\n1.0\n1.0\n9.0\n2.0\nnull\nnull\n20452.0\nnull\n\n\n\"50%\"\n2022.0\n1.0\n1.0\n16.0\n4.0\nnull\nnull\n20452.0\nnull\n\n\n\"75%\"\n2022.0\n1.0\n1.0\n24.0\n6.0\nnull\nnull\n20452.0\nnull\n\n\n\"max\"\n2022.0\n1.0\n1.0\n31.0\n7.0\n\"2022-01-31\"\n\"YX\"\n20452.0\n\"YX\"\n\n\n\n\n\n\n\n\n1.2.2 Row and column counting\nDetermining the number of rows and columns in a polars DataFrame is as simple as checking the shape:\n\nflights.shape\n\n(999, 110)\n\n\nThe output from polars comes with some useful features:\n\nUnderneath each column name is a data type.\nNo index numbers are present.\nString values are quoted with double quotes.\nMissing values are represented as null, applicable to all data types.\n\n\n\n1.2.3 Converting from pandas\nTransitioning from a Pandas DataFrame to a polars DataFrame is effortless with the from_pandas() method:\n\nimport pandas as pd\nflights2 = pl.from_pandas(pd.read_csv('./data/flights.csv'))\n\nflights2[:,0:9].glimpse()\n\nRows: 999\nColumns: 9\n$ Year                        &lt;i64&gt; 2022, 2022, 2022, 2022, 2022, 2022, 2022, 2022, 2022, 2022\n$ Quarter                     &lt;i64&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1\n$ Month                       &lt;i64&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1\n$ DayofMonth                  &lt;i64&gt; 14, 15, 16, 17, 18, 19, 20, 21, 22, 23\n$ DayOfWeek                   &lt;i64&gt; 5, 6, 7, 1, 2, 3, 4, 5, 6, 7\n$ FlightDate                  &lt;str&gt; '2022-01-14', '2022-01-15', '2022-01-16', '2022-01-17', '2022-01-18', '2022-01-19', '2022-01-20', '2022-01-21', '2022-01-22', '2022-01-23'\n$ Reporting_Airline           &lt;str&gt; 'YX', 'YX', 'YX', 'YX', 'YX', 'YX', 'YX', 'YX', 'YX', 'YX'\n$ DOT_ID_Reporting_Airline    &lt;i64&gt; 20452, 20452, 20452, 20452, 20452, 20452, 20452, 20452, 20452, 20452\n$ IATA_CODE_Reporting_Airline &lt;str&gt; 'YX', 'YX', 'YX', 'YX', 'YX', 'YX', 'YX', 'YX', 'YX', 'YX'\n\n\n\n\n\n1.2.4 Understanding data structure\nThe fundamental data structures in polars are Series and DataFrames:\n\nSeries is 1-dimensional data structure, akin to R’s atomic vector, where all elements must share the same data type.\n\n\ns = pl.Series('a', [1, 2, 3])\nprint(s)\n\nshape: (3,)\nSeries: 'a' [i64]\n[\n    1\n    2\n    3\n]\n\n\n\ns.dtype\n\nInt64\n\n\n\nSeries supports various methods, including operations like finding the maximum or calculating the mean.\n\n\ns.max()\n\n3\n\n\n\ns.mean()\n\n2.0\n\n\n\nDataFrames are 2-dimensional structures backed by Series, similar to R’s data.frame. They come with several attributes for exploration:\n\n\nflights.columns\nflights.dtypes\nflights.height\nflights.width\nflights.schema\nflights.shape\nflights[:,0:9].flags\n\n{'Year': {'SORTED_ASC': False, 'SORTED_DESC': False},\n 'Quarter': {'SORTED_ASC': False, 'SORTED_DESC': False},\n 'Month': {'SORTED_ASC': False, 'SORTED_DESC': False},\n 'DayofMonth': {'SORTED_ASC': False, 'SORTED_DESC': False},\n 'DayOfWeek': {'SORTED_ASC': False, 'SORTED_DESC': False},\n 'FlightDate': {'SORTED_ASC': False, 'SORTED_DESC': False},\n 'Reporting_Airline': {'SORTED_ASC': False, 'SORTED_DESC': False},\n 'DOT_ID_Reporting_Airline': {'SORTED_ASC': False, 'SORTED_DESC': False},\n 'IATA_CODE_Reporting_Airline': {'SORTED_ASC': False, 'SORTED_DESC': False}}",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>First steps with polars</span>"
    ]
  },
  {
    "objectID": "first_steps.html#summary",
    "href": "first_steps.html#summary",
    "title": "1  First steps with polars",
    "section": "1.3 Summary",
    "text": "1.3 Summary\nAt first glance, polars offers the ease of use reminiscent of R, blending with the familiarity of pandas (minus any potential frustrations).",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>First steps with polars</span>"
    ]
  },
  {
    "objectID": "data_manipulation.html",
    "href": "data_manipulation.html",
    "title": "2  Data manipulation",
    "section": "",
    "text": "2.1 Data type conversion\nIn R, you work with four main types of vectors: logical, integer, double, and character. When you mix different types, they get automatically adjusted in a specific order: character → double → integer → logical. If you want to intentionally adjust them, you can use functions like as.integer(), as.double(), as.logical(), and as.character().\nOn the other hand, in polars, there’s a wider variety of data types, and you need to purposefully adjust them when needed.\nfull_flights['Year'].dtype\n\nInt64\nfull_flights = full_flights.with_columns(\n    pl.col('Year').cast(pl.Utf8)\n)\nfull_flights['Year'].dtype\n\nString",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data manipulation</span>"
    ]
  },
  {
    "objectID": "data_manipulation.html#introduction-to-methods",
    "href": "data_manipulation.html#introduction-to-methods",
    "title": "2  Data manipulation",
    "section": "2.2 Introduction to methods",
    "text": "2.2 Introduction to methods",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data manipulation</span>"
    ]
  },
  {
    "objectID": "data_manipulation.html#single-table-operation",
    "href": "data_manipulation.html#single-table-operation",
    "title": "2  Data manipulation",
    "section": "2.3 Single table operation",
    "text": "2.3 Single table operation\n\n2.3.1 Filtering rows\n\nRetrieving all flights from Oihio (filtering based on one condition)\n\n\n# recommended way\nflights_from_ohio = full_flights.filter(pl.col('OriginStateName') == 'Ohio')\n\n# alternative way (not recommended)\n# flights_from_ohio = full_flights[full_flights['OriginStateName'] == 'Ohio']\n\nflights_from_ohio['OriginStateName'].value_counts()\n\n\nshape: (1, 2)\n\n\n\nOriginStateName\ncount\n\n\nstr\nu32\n\n\n\n\n\"Ohio\"\n7434\n\n\n\n\n\n\n\nObtaining all flights from Ohio to Virginia (filtering based on multiple conditions)\n\n\n# note that each predicate must be enclosed within parentheses\nflights_from_ohio_to_virginia = full_flights.filter(\n    (pl.col('OriginStateName') == 'Ohio') & (pl.col('DestStateName') == 'Virginia')\n)\n\n# you can replace `&` with `,` to avoid parentheses\n# flights_from_ohio_to_virginia = full_flights.filter(\n#     pl.col('OriginStateName') == 'Ohio', \n#     pl.col('DestStateName') == 'Virginia'\n# )\n\nflights_from_ohio_to_virginia['DestStateName'].value_counts()\n\n\nshape: (1, 2)\n\n\n\nDestStateName\ncount\n\n\nstr\nu32\n\n\n\n\n\"Virginia\"\n564\n\n\n\n\n\n\n\nFetching all flights from Ohito to any state except Virginia (filtering based on negative condition)\n\n\nflights_from_ohio_except_to_virginia = full_flights.filter(\n    pl.col('OriginStateName') == 'Ohio', \n    ~(pl.col('DestStateName') == 'Virginia')\n)\nflights_from_ohio_except_to_virginia['DestStateName'].value_counts(sort=True).head()\n\n\nshape: (5, 2)\n\n\n\nDestStateName\ncount\n\n\nstr\nu32\n\n\n\n\n\"Florida\"\n1349\n\n\n\"New York\"\n988\n\n\n\"Illinois\"\n617\n\n\n\"North Carolina…\n564\n\n\n\"Georgia\"\n526\n\n\n\n\n\n\n\nWhy using the .filter() method? The reason is to leverage lazy execution and query optimization\n\n\n%%time\n# this code is optimized by polars query engine before reading any data into memory\nlazy_stmt = (\n    pl.scan_csv('./data/On_Time_Reporting_Carrier_On_Time_Performance_(1987_present)_2022_1.csv')\n    .filter(pl.col('OriginStateName') == 'Ohio')\n    .collect()\n)\n\nCPU times: user 3.22 s, sys: 354 ms, total: 3.57 s\nWall time: 460 ms\n\n\n\n%%time\neager_stmt = (\n    pl.read_csv('./data/On_Time_Reporting_Carrier_On_Time_Performance_(1987_present)_2022_1.csv')\n    .filter(pl.col('OriginStateName') == 'Ohio')\n)\n\nCPU times: user 3.68 s, sys: 600 ms, total: 4.28 s\nWall time: 624 ms\n\n\n\n\n2.3.2 Selecting columns\nSelecting variables within a DataFrame in polars is highly expressive, offering flexibility based on either variable names or types. Here’s a breakdown from simple to complex:\n\nUtilizing the select function to create a DataFrame from Series:\n\n\nfoo = pl.Series('foo', [1, 2, 3])\nbar = pl.Series('bar', [4, 5, 6])\n\npl.select(mmin = pl.min_horizontal(foo, bar))\n\n\nshape: (3, 1)\n\n\n\nmmin\n\n\ni64\n\n\n\n\n1\n\n\n2\n\n\n3\n\n\n\n\n\n\n\nSelecting columns by names:\n\n\nfull_flights.select(['FlightDate', 'Tail_Number']).head(3)\n# or \n# full_flights.select(pl.col(['FlightDate', 'Tail_Number'])).head(3)\n\n\nshape: (3, 2)\n\n\n\nFlightDate\nTail_Number\n\n\nstr\nstr\n\n\n\n\n\"2022-01-14\"\n\"N119HQ\"\n\n\n\"2022-01-15\"\n\"N122HQ\"\n\n\n\"2022-01-16\"\n\"N412YX\"\n\n\n\n\n\n\n\nSelecting columns by types:\n\n\n# select all integer columns\nfull_flights.select(pl.col(pl.Int64)).head(3)\n\n\nshape: (3, 22)\n\n\n\nQuarter\nMonth\nDayofMonth\nDayOfWeek\nDOT_ID_Reporting_Airline\nFlight_Number_Reporting_Airline\nOriginAirportID\nOriginAirportSeqID\nOriginCityMarketID\nOriginStateFips\nOriginWac\nDestAirportID\nDestAirportSeqID\nDestCityMarketID\nDestStateFips\nDestWac\nCRSDepTime\nDepartureDelayGroups\nCRSArrTime\nArrivalDelayGroups\nDistanceGroup\nDivAirportLandings\n\n\ni64\ni64\ni64\ni64\ni64\ni64\ni64\ni64\ni64\ni64\ni64\ni64\ni64\ni64\ni64\ni64\ni64\ni64\ni64\ni64\ni64\ni64\n\n\n\n\n1\n1\n14\n5\n20452\n4879\n11066\n1106606\n31066\n39\n44\n11278\n1127805\n30852\n51\n38\n1224\n-1\n1352\n0\n2\n0\n\n\n1\n1\n15\n6\n20452\n4879\n11066\n1106606\n31066\n39\n44\n11278\n1127805\n30852\n51\n38\n1224\n-1\n1352\n-2\n2\n0\n\n\n1\n1\n16\n7\n20452\n4879\n11066\n1106606\n31066\n39\n44\n11278\n1127805\n30852\n51\n38\n1224\n-1\n1352\n-1\n2\n0\n\n\n\n\n\n\n\n# select all numeric columns\nfull_flights.select(\n    pl.col(pl.Int64),\n    pl.col(pl.Float64)\n).head(3)\n\n\nshape: (3, 44)\n\n\n\nQuarter\nMonth\nDayofMonth\nDayOfWeek\nDOT_ID_Reporting_Airline\nFlight_Number_Reporting_Airline\nOriginAirportID\nOriginAirportSeqID\nOriginCityMarketID\nOriginStateFips\nOriginWac\nDestAirportID\nDestAirportSeqID\nDestCityMarketID\nDestStateFips\nDestWac\nCRSDepTime\nDepartureDelayGroups\nCRSArrTime\nArrivalDelayGroups\nDistanceGroup\nDivAirportLandings\nDepDelay\nDepDelayMinutes\nDepDel15\nTaxiOut\nTaxiIn\nArrDelay\nArrDelayMinutes\nArrDel15\nCancelled\nDiverted\nCRSElapsedTime\nActualElapsedTime\nAirTime\nFlights\nDistance\nCarrierDelay\nWeatherDelay\nNASDelay\nSecurityDelay\nLateAircraftDelay\nTotalAddGTime\nLongestAddGTime\n\n\ni64\ni64\ni64\ni64\ni64\ni64\ni64\ni64\ni64\ni64\ni64\ni64\ni64\ni64\ni64\ni64\ni64\ni64\ni64\ni64\ni64\ni64\nf64\nf64\nf64\nf64\nf64\nf64\nf64\nf64\nf64\nf64\nf64\nf64\nf64\nf64\nf64\nf64\nf64\nf64\nf64\nf64\nf64\nf64\n\n\n\n\n1\n1\n14\n5\n20452\n4879\n11066\n1106606\n31066\n39\n44\n11278\n1127805\n30852\n51\n38\n1224\n-1\n1352\n0\n2\n0\n-3.0\n0.0\n0.0\n28.0\n4.0\n4.0\n4.0\n0.0\n0.0\n0.0\n88.0\n95.0\n63.0\n1.0\n323.0\nnull\nnull\nnull\nnull\nnull\nnull\nnull\n\n\n1\n1\n15\n6\n20452\n4879\n11066\n1106606\n31066\n39\n44\n11278\n1127805\n30852\n51\n38\n1224\n-1\n1352\n-2\n2\n0\n-10.0\n0.0\n0.0\n19.0\n5.0\n-24.0\n0.0\n0.0\n0.0\n0.0\n88.0\n74.0\n50.0\n1.0\n323.0\nnull\nnull\nnull\nnull\nnull\nnull\nnull\n\n\n1\n1\n16\n7\n20452\n4879\n11066\n1106606\n31066\n39\n44\n11278\n1127805\n30852\n51\n38\n1224\n-1\n1352\n-1\n2\n0\n-6.0\n0.0\n0.0\n16.0\n12.0\n-13.0\n0.0\n0.0\n0.0\n0.0\n88.0\n81.0\n53.0\n1.0\n323.0\nnull\nnull\nnull\nnull\nnull\nnull\nnull\n\n\n\n\n\n\n\nComplex column selection with Selectors, analogous to dplyr’s selection helpers\n\n\nimport polars.selectors as cs\n\n# match all variables. Same as dplyr's `everything()`\nfull_flights.select(cs.all()).head(3)\n\n\nshape: (3, 110)\n\n\n\nYear\nQuarter\nMonth\nDayofMonth\nDayOfWeek\nFlightDate\nReporting_Airline\nDOT_ID_Reporting_Airline\nIATA_CODE_Reporting_Airline\nTail_Number\nFlight_Number_Reporting_Airline\nOriginAirportID\nOriginAirportSeqID\nOriginCityMarketID\nOrigin\nOriginCityName\nOriginState\nOriginStateFips\nOriginStateName\nOriginWac\nDestAirportID\nDestAirportSeqID\nDestCityMarketID\nDest\nDestCityName\nDestState\nDestStateFips\nDestStateName\nDestWac\nCRSDepTime\nDepTime\nDepDelay\nDepDelayMinutes\nDepDel15\nDepartureDelayGroups\nDepTimeBlk\nTaxiOut\n…\nDiv1TotalGTime\nDiv1LongestGTime\nDiv1WheelsOff\nDiv1TailNum\nDiv2Airport\nDiv2AirportID\nDiv2AirportSeqID\nDiv2WheelsOn\nDiv2TotalGTime\nDiv2LongestGTime\nDiv2WheelsOff\nDiv2TailNum\nDiv3Airport\nDiv3AirportID\nDiv3AirportSeqID\nDiv3WheelsOn\nDiv3TotalGTime\nDiv3LongestGTime\nDiv3WheelsOff\nDiv3TailNum\nDiv4Airport\nDiv4AirportID\nDiv4AirportSeqID\nDiv4WheelsOn\nDiv4TotalGTime\nDiv4LongestGTime\nDiv4WheelsOff\nDiv4TailNum\nDiv5Airport\nDiv5AirportID\nDiv5AirportSeqID\nDiv5WheelsOn\nDiv5TotalGTime\nDiv5LongestGTime\nDiv5WheelsOff\nDiv5TailNum\n\n\n\nstr\ni64\ni64\ni64\ni64\nstr\nstr\ni64\nstr\nstr\ni64\ni64\ni64\ni64\nstr\nstr\nstr\ni64\nstr\ni64\ni64\ni64\ni64\nstr\nstr\nstr\ni64\nstr\ni64\ni64\nstr\nf64\nf64\nf64\ni64\nstr\nf64\n…\nstr\nstr\nstr\nstr\nstr\nstr\nstr\nstr\nstr\nstr\nstr\nstr\nstr\nstr\nstr\nstr\nstr\nstr\nstr\nstr\nstr\nstr\nstr\nstr\nstr\nstr\nstr\nstr\nstr\nstr\nstr\nstr\nstr\nstr\nstr\nstr\nstr\n\n\n\n\n\"2022\"\n1\n1\n14\n5\n\"2022-01-14\"\n\"YX\"\n20452\n\"YX\"\n\"N119HQ\"\n4879\n11066\n1106606\n31066\n\"CMH\"\n\"Columbus, OH\"\n\"OH\"\n39\n\"Ohio\"\n44\n11278\n1127805\n30852\n\"DCA\"\n\"Washington, DC…\n\"VA\"\n51\n\"Virginia\"\n38\n1224\n\"1221\"\n-3.0\n0.0\n0.0\n-1\n\"1200-1259\"\n28.0\n…\nnull\nnull\n\"\"\n\"\"\n\"\"\nnull\nnull\n\"\"\nnull\nnull\n\"\"\n\"\"\n\"\"\nnull\nnull\n\"\"\nnull\nnull\n\"\"\n\"\"\n\"\"\nnull\nnull\n\"\"\nnull\nnull\n\"\"\n\"\"\n\"\"\nnull\nnull\n\"\"\nnull\nnull\n\"\"\n\"\"\nnull\n\n\n\"2022\"\n1\n1\n15\n6\n\"2022-01-15\"\n\"YX\"\n20452\n\"YX\"\n\"N122HQ\"\n4879\n11066\n1106606\n31066\n\"CMH\"\n\"Columbus, OH\"\n\"OH\"\n39\n\"Ohio\"\n44\n11278\n1127805\n30852\n\"DCA\"\n\"Washington, DC…\n\"VA\"\n51\n\"Virginia\"\n38\n1224\n\"1214\"\n-10.0\n0.0\n0.0\n-1\n\"1200-1259\"\n19.0\n…\nnull\nnull\n\"\"\n\"\"\n\"\"\nnull\nnull\n\"\"\nnull\nnull\n\"\"\n\"\"\n\"\"\nnull\nnull\n\"\"\nnull\nnull\n\"\"\n\"\"\n\"\"\nnull\nnull\n\"\"\nnull\nnull\n\"\"\n\"\"\n\"\"\nnull\nnull\n\"\"\nnull\nnull\n\"\"\n\"\"\nnull\n\n\n\"2022\"\n1\n1\n16\n7\n\"2022-01-16\"\n\"YX\"\n20452\n\"YX\"\n\"N412YX\"\n4879\n11066\n1106606\n31066\n\"CMH\"\n\"Columbus, OH\"\n\"OH\"\n39\n\"Ohio\"\n44\n11278\n1127805\n30852\n\"DCA\"\n\"Washington, DC…\n\"VA\"\n51\n\"Virginia\"\n38\n1224\n\"1218\"\n-6.0\n0.0\n0.0\n-1\n\"1200-1259\"\n16.0\n…\nnull\nnull\n\"\"\n\"\"\n\"\"\nnull\nnull\n\"\"\nnull\nnull\n\"\"\n\"\"\n\"\"\nnull\nnull\n\"\"\nnull\nnull\n\"\"\n\"\"\n\"\"\nnull\nnull\n\"\"\nnull\nnull\n\"\"\n\"\"\n\"\"\nnull\nnull\n\"\"\nnull\nnull\n\"\"\n\"\"\nnull\n\n\n\n\n\n\n\n# match variables by prefix or suffix\nfull_flights.select(\n    cs.starts_with('Flight') | cs.ends_with('Delay')\n).head(3)\n\n\nshape: (3, 11)\n\n\n\nFlightDate\nFlight_Number_Reporting_Airline\nFlights\nDepDelay\nArrDelay\nCarrierDelay\nWeatherDelay\nNASDelay\nSecurityDelay\nLateAircraftDelay\nDivArrDelay\n\n\nstr\ni64\nf64\nf64\nf64\nf64\nf64\nf64\nf64\nf64\nstr\n\n\n\n\n\"2022-01-14\"\n4879\n1.0\n-3.0\n4.0\nnull\nnull\nnull\nnull\nnull\nnull\n\n\n\"2022-01-15\"\n4879\n1.0\n-10.0\n-24.0\nnull\nnull\nnull\nnull\nnull\nnull\n\n\n\"2022-01-16\"\n4879\n1.0\n-6.0\n-13.0\nnull\nnull\nnull\nnull\nnull\nnull\n\n\n\n\n\n\nA detailed comparison between dplyr and polars column selection helpers:\n\n\n\n\n\n\n\n\ndplyr action\ndplyr function\npolars function\n\n\n\n\nmatches all columns\neverything()\ncs.all()\n\n\nmatches all integer columns\nwhere(is.integer())\ncs.integer()\n\n\nmatches all factor/categorical columns\nwhere(is.factor())\ncs.categorical()\n\n\nmatches all float columns\nwhere(is.double())\ncs.float()\n\n\nmatches all string columns\nwhere(is.character())\ncs.string()\n\n\nmatches all date columns\nwhere(\\(x) class(x) == \"Date\")\ncs.date()\n\n\nmatch all datetime columns\nnot available\ncs.datetime()\n\n\nmatch all time columns\nnot available\ncs.time()\n\n\nmatch all date/datetime columns\nnot available\ncs.temporal()\n\n\nselect the last column\nlast_col()\ncs.last()\n\n\nstarts with a prefix\nstarts_with()\ncs.starts_with()\n\n\nends with a suffix\nend_with()\ncs.ends_with()\n\n\ncontains a literal string\ncontains()\ncs.contains()\n\n\nmatches a regular expression\nmatches()\ncs.matches()\n\n\ntakes the complement of a set of columns\n!\n~\n\n\ntakes the difference between a set of columns\nnot available\n-\n\n\nselects a range of consecutive columns\ncol1:col10\nnot available\n\n\nmatches all column names in a list, no error thrown for non-existing names\nany_of()\nnot available\n\n\n\n\n\n2.3.3 Modify/Add column\n\n\n2.3.4 Rename column\n\n\n2.3.5 Remove column\n\n\n2.3.6 Aggregation by group\n\n\n2.3.7 Sort a DataFrame",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data manipulation</span>"
    ]
  },
  {
    "objectID": "data_manipulation.html#two-tables-operation",
    "href": "data_manipulation.html#two-tables-operation",
    "title": "2  Data manipulation",
    "section": "2.4 Two tables operation",
    "text": "2.4 Two tables operation\n\n2.4.1 Join DataFrames\n\n\n2.4.2 Concatenate DataFrames",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data manipulation</span>"
    ]
  },
  {
    "objectID": "data_manipulation.html#pivot-a-dataframe",
    "href": "data_manipulation.html#pivot-a-dataframe",
    "title": "2  Data manipulation",
    "section": "2.5 Pivot a DataFrame",
    "text": "2.5 Pivot a DataFrame",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data manipulation</span>"
    ]
  },
  {
    "objectID": "data_manipulation.html#dealing-with-missing-values",
    "href": "data_manipulation.html#dealing-with-missing-values",
    "title": "2  Data manipulation",
    "section": "2.6 Dealing with missing values",
    "text": "2.6 Dealing with missing values",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data manipulation</span>"
    ]
  },
  {
    "objectID": "data_manipulation.html#strings-methods",
    "href": "data_manipulation.html#strings-methods",
    "title": "2  Data manipulation",
    "section": "2.7 Strings methods",
    "text": "2.7 Strings methods",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data manipulation</span>"
    ]
  },
  {
    "objectID": "data_manipulation.html#handling-datetime",
    "href": "data_manipulation.html#handling-datetime",
    "title": "2  Data manipulation",
    "section": "2.8 Handling datetime",
    "text": "2.8 Handling datetime",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data manipulation</span>"
    ]
  },
  {
    "objectID": "data_manipulation.html#other-useful-methods",
    "href": "data_manipulation.html#other-useful-methods",
    "title": "2  Data manipulation",
    "section": "2.9 Other useful methods",
    "text": "2.9 Other useful methods",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data manipulation</span>"
    ]
  },
  {
    "objectID": "import_export.html",
    "href": "import_export.html",
    "title": "3  Import/Export",
    "section": "",
    "text": "3.1 Import data",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Import/Export</span>"
    ]
  },
  {
    "objectID": "import_export.html#export-data",
    "href": "import_export.html#export-data",
    "title": "3  Import/Export",
    "section": "3.2 Export data",
    "text": "3.2 Export data",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Import/Export</span>"
    ]
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "Summary & references",
    "section": "",
    "text": "Summary",
    "crumbs": [
      "Summary & references"
    ]
  },
  {
    "objectID": "references.html#summary",
    "href": "references.html#summary",
    "title": "Summary & references",
    "section": "",
    "text": "Zen of polars (a.k.a. the polars design principles). If you’re into tidyverse, you might find the polars API design guideline familiar with tidy design principles\n\n        - readability over saving keystrokes\n        - explicit over implicit\n        - aim for a single return dtype per expression\n        - API should nudge to fast code\n        - pure over in-place\n        - undersore over concatenated words\n        - minimize ambiguity",
    "crumbs": [
      "Summary & references"
    ]
  },
  {
    "objectID": "references.html#references",
    "href": "references.html#references",
    "title": "Summary & references",
    "section": "References",
    "text": "References\nHere is a compilation of resources, including talks, articles, blogs and tutorials, that I studied in crafting this book.\n\nMust watch: Ritchie Vink’s (author of polars) keynote at EuroSciPy 2023\nPolars user guide\nModern polars\nCookbook polars for R\nPython’s polars API reference\nPractical business Python - Introduction to polars\nReal Python - Python polars: A lightning-fast DataFrame libray\nA bird’s eye view of polars\nAwesome polars - A curated list of polars docs, talks, tools, examples and articles",
    "crumbs": [
      "Summary & references"
    ]
  }
]