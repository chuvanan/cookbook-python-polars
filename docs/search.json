[
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "Summary",
    "section": "",
    "text": "Summary\nIn summary, this book has no content whatsoever.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "References"
  },
  {
    "objectID": "first_steps.html",
    "href": "first_steps.html",
    "title": "First steps with polars",
    "section": "",
    "text": "Let’s kick off our journey into the world of data manipulation with the polars library. First things first, we need to install polars and set up a virtual environment for a clean installation. Use the following commands:\n# you better setting up a virtual enviroment before \n# installing any python libraries\npip install polars\nTo gain insights into the installed polars package, including version details and enabled features, utilize the build_info() method in Python:\n\nimport polars as pl\npl.build_info()"
  },
  {
    "objectID": "first_steps.html#installation",
    "href": "first_steps.html#installation",
    "title": "First steps with polars",
    "section": "",
    "text": "Let’s kick off our journey into the world of data manipulation with the polars library. First things first, we need to install polars and set up a virtual environment for a clean installation. Use the following commands:\n# you better setting up a virtual enviroment before \n# installing any python libraries\npip install polars\nTo gain insights into the installed polars package, including version details and enabled features, utilize the build_info() method in Python:\n\nimport polars as pl\npl.build_info()"
  },
  {
    "objectID": "first_steps.html#initial-exploration",
    "href": "first_steps.html#initial-exploration",
    "title": "First steps with polars",
    "section": "Initial exploration",
    "text": "Initial exploration\n\nReading data with polars\nReading a CSV file using polars is not only straightforward but also efficient. Let’s take a quick look:\n\nimport polars as pl\nflights = pl.read_csv('./data/flights.csv')\n\nIf you’re coming from an R background, checking the data types in polars might seem overwhelming due to the numerous available types. Here’s a quick way to inspect them:\n\n# 10 sample columns\nflights[:,0:9].schema\n\nOrderedDict([('Year', Int64),\n             ('Quarter', Int64),\n             ('Month', Int64),\n             ('DayofMonth', Int64),\n             ('DayOfWeek', Int64),\n             ('FlightDate', String),\n             ('Reporting_Airline', String),\n             ('DOT_ID_Reporting_Airline', Int64),\n             ('IATA_CODE_Reporting_Airline', String)])\n\n\nFor those familiar with R’s dplyr, a similar method called glimpse() is available:\n\nflights[:, 0:9].glimpse()\n\nRows: 999\nColumns: 9\n$ Year                        &lt;i64&gt; 2022, 2022, 2022, 2022, 2022, 2022, 2022, 2022, 2022, 2022\n$ Quarter                     &lt;i64&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1\n$ Month                       &lt;i64&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1\n$ DayofMonth                  &lt;i64&gt; 14, 15, 16, 17, 18, 19, 20, 21, 22, 23\n$ DayOfWeek                   &lt;i64&gt; 5, 6, 7, 1, 2, 3, 4, 5, 6, 7\n$ FlightDate                  &lt;str&gt; '2022-01-14', '2022-01-15', '2022-01-16', '2022-01-17', '2022-01-18', '2022-01-19', '2022-01-20', '2022-01-21', '2022-01-22', '2022-01-23'\n$ Reporting_Airline           &lt;str&gt; 'YX', 'YX', 'YX', 'YX', 'YX', 'YX', 'YX', 'YX', 'YX', 'YX'\n$ DOT_ID_Reporting_Airline    &lt;i64&gt; 20452, 20452, 20452, 20452, 20452, 20452, 20452, 20452, 20452, 20452\n$ IATA_CODE_Reporting_Airline &lt;str&gt; 'YX', 'YX', 'YX', 'YX', 'YX', 'YX', 'YX', 'YX', 'YX', 'YX'\n\n\n\nStandard commands from pandas such as head(), tail(), and describe() can be used seamlessly:\n\nflights[:, 0:9].head()\n\n\nshape: (5, 9)\n\n\n\nYear\nQuarter\nMonth\nDayofMonth\nDayOfWeek\nFlightDate\nReporting_Airline\nDOT_ID_Reporting_Airline\nIATA_CODE_Reporting_Airline\n\n\ni64\ni64\ni64\ni64\ni64\nstr\nstr\ni64\nstr\n\n\n\n\n2022\n1\n1\n14\n5\n\"2022-01-14\"\n\"YX\"\n20452\n\"YX\"\n\n\n2022\n1\n1\n15\n6\n\"2022-01-15\"\n\"YX\"\n20452\n\"YX\"\n\n\n2022\n1\n1\n16\n7\n\"2022-01-16\"\n\"YX\"\n20452\n\"YX\"\n\n\n2022\n1\n1\n17\n1\n\"2022-01-17\"\n\"YX\"\n20452\n\"YX\"\n\n\n2022\n1\n1\n18\n2\n\"2022-01-18\"\n\"YX\"\n20452\n\"YX\"\n\n\n\n\n\n\n\nflights[:, 0:9].tail()\n\n\nshape: (5, 9)\n\n\n\nYear\nQuarter\nMonth\nDayofMonth\nDayOfWeek\nFlightDate\nReporting_Airline\nDOT_ID_Reporting_Airline\nIATA_CODE_Reporting_Airline\n\n\ni64\ni64\ni64\ni64\ni64\nstr\nstr\ni64\nstr\n\n\n\n\n2022\n1\n1\n12\n3\n\"2022-01-12\"\n\"YX\"\n20452\n\"YX\"\n\n\n2022\n1\n1\n13\n4\n\"2022-01-13\"\n\"YX\"\n20452\n\"YX\"\n\n\n2022\n1\n1\n14\n5\n\"2022-01-14\"\n\"YX\"\n20452\n\"YX\"\n\n\n2022\n1\n1\n17\n1\n\"2022-01-17\"\n\"YX\"\n20452\n\"YX\"\n\n\n2022\n1\n1\n18\n2\n\"2022-01-18\"\n\"YX\"\n20452\n\"YX\"\n\n\n\n\n\n\n\nflights[:, 0:9].describe()\n\n\nshape: (9, 10)\n\n\n\nstatistic\nYear\nQuarter\nMonth\nDayofMonth\nDayOfWeek\nFlightDate\nReporting_Airline\nDOT_ID_Reporting_Airline\nIATA_CODE_Reporting_Airline\n\n\nstr\nf64\nf64\nf64\nf64\nf64\nstr\nstr\nf64\nstr\n\n\n\n\n\"count\"\n999.0\n999.0\n999.0\n999.0\n999.0\n\"999\"\n\"999\"\n999.0\n\"999\"\n\n\n\"null_count\"\n0.0\n0.0\n0.0\n0.0\n0.0\n\"0\"\n\"0\"\n0.0\n\"0\"\n\n\n\"mean\"\n2022.0\n1.0\n1.0\n16.2002\n3.934935\nnull\nnull\n20452.0\nnull\n\n\n\"std\"\n0.0\n0.0\n0.0\n8.802666\n2.058944\nnull\nnull\n0.0\nnull\n\n\n\"min\"\n2022.0\n1.0\n1.0\n1.0\n1.0\n\"2022-01-01\"\n\"YX\"\n20452.0\n\"YX\"\n\n\n\"25%\"\n2022.0\n1.0\n1.0\n9.0\n2.0\nnull\nnull\n20452.0\nnull\n\n\n\"50%\"\n2022.0\n1.0\n1.0\n16.0\n4.0\nnull\nnull\n20452.0\nnull\n\n\n\"75%\"\n2022.0\n1.0\n1.0\n24.0\n6.0\nnull\nnull\n20452.0\nnull\n\n\n\"max\"\n2022.0\n1.0\n1.0\n31.0\n7.0\n\"2022-01-31\"\n\"YX\"\n20452.0\n\"YX\"\n\n\n\n\n\n\n\n\nRow and column counting\nDetermining the number of rows and columns in a polars DataFrame is as simple as checking the shape:\n\nflights.shape\n\n(999, 110)\n\n\nThe output from polars comes with some useful features:\n\nUnderneath each column name is a data type.\nNo index numbers are present.\nString values are quoted with double quotes.\nMissing values are represented as null, applicable to all data types.\n\n\n\nConverting from pandas\nTransitioning from a Pandas DataFrame to a polars DataFrame is effortless with the from_pandas() method:\n\nimport pandas as pd\nflights2 = pl.from_pandas(pd.read_csv('./data/flights.csv'))\n\nflights2[:,0:9].glimpse()\n\nRows: 999\nColumns: 9\n$ Year                        &lt;i64&gt; 2022, 2022, 2022, 2022, 2022, 2022, 2022, 2022, 2022, 2022\n$ Quarter                     &lt;i64&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1\n$ Month                       &lt;i64&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1\n$ DayofMonth                  &lt;i64&gt; 14, 15, 16, 17, 18, 19, 20, 21, 22, 23\n$ DayOfWeek                   &lt;i64&gt; 5, 6, 7, 1, 2, 3, 4, 5, 6, 7\n$ FlightDate                  &lt;str&gt; '2022-01-14', '2022-01-15', '2022-01-16', '2022-01-17', '2022-01-18', '2022-01-19', '2022-01-20', '2022-01-21', '2022-01-22', '2022-01-23'\n$ Reporting_Airline           &lt;str&gt; 'YX', 'YX', 'YX', 'YX', 'YX', 'YX', 'YX', 'YX', 'YX', 'YX'\n$ DOT_ID_Reporting_Airline    &lt;i64&gt; 20452, 20452, 20452, 20452, 20452, 20452, 20452, 20452, 20452, 20452\n$ IATA_CODE_Reporting_Airline &lt;str&gt; 'YX', 'YX', 'YX', 'YX', 'YX', 'YX', 'YX', 'YX', 'YX', 'YX'\n\n\n\n\n\nUnderstanding data structure\nThe fundamental data structures in polars are Series and DataFrames:\n\nSeries is 1-dimensional data structure, akin to R’s atomic vector, where all elements must share the same data type.\n\n\ns = pl.Series('a', [1, 2, 3])\nprint(s)\n\nshape: (3,)\nSeries: 'a' [i64]\n[\n    1\n    2\n    3\n]\n\n\n\ns.dtype\n\nInt64\n\n\n\nSeries supports various methods, including operations like finding the maximum or calculating the mean.\n\n\ns.max()\n\n3\n\n\n\ns.mean()\n\n2.0\n\n\n\nDataFrames are 2-dimensional structures backed by Series, similar to R’s data.frame. They come with several attributes for exploration:\n\n\nflights.columns\nflights.dtypes\nflights.height\nflights.width\nflights.schema\nflights.shape\nflights[:,0:9].flags\n\n{'Year': {'SORTED_ASC': False, 'SORTED_DESC': False},\n 'Quarter': {'SORTED_ASC': False, 'SORTED_DESC': False},\n 'Month': {'SORTED_ASC': False, 'SORTED_DESC': False},\n 'DayofMonth': {'SORTED_ASC': False, 'SORTED_DESC': False},\n 'DayOfWeek': {'SORTED_ASC': False, 'SORTED_DESC': False},\n 'FlightDate': {'SORTED_ASC': False, 'SORTED_DESC': False},\n 'Reporting_Airline': {'SORTED_ASC': False, 'SORTED_DESC': False},\n 'DOT_ID_Reporting_Airline': {'SORTED_ASC': False, 'SORTED_DESC': False},\n 'IATA_CODE_Reporting_Airline': {'SORTED_ASC': False, 'SORTED_DESC': False}}"
  },
  {
    "objectID": "first_steps.html#summary",
    "href": "first_steps.html#summary",
    "title": "First steps with polars",
    "section": "Summary",
    "text": "Summary\nAt first glance, polars offers the ease of use reminiscent of R, blending with the familiarity of pandas (minus any potential frustrations)."
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "Introduction",
    "section": "",
    "text": "Introduction\nThis is a book created from markdown and executable code.\nSee Knuth (1984) for additional discussion of literate programming.\n\n1 + 1\n\n[1] 2\n\n\n\n\n\n\nKnuth, Donald E. 1984. “Literate Programming.” Comput. J. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97."
  },
  {
    "objectID": "Untitled.html",
    "href": "Untitled.html",
    "title": "",
    "section": "",
    "text": "import polars as pl\n\n\nflights = pl.read_csv('./data/flights.csv')\n\n\nflights.head()\n\n\nshape: (5, 110)\n\n\n\nYear\nQuarter\nMonth\nDayofMonth\nDayOfWeek\nFlightDate\nReporting_Airline\nDOT_ID_Reporting_Airline\nIATA_CODE_Reporting_Airline\nTail_Number\nFlight_Number_Reporting_Airline\nOriginAirportID\nOriginAirportSeqID\nOriginCityMarketID\nOrigin\nOriginCityName\nOriginState\nOriginStateFips\nOriginStateName\nOriginWac\nDestAirportID\nDestAirportSeqID\nDestCityMarketID\nDest\nDestCityName\nDestState\nDestStateFips\nDestStateName\nDestWac\nCRSDepTime\nDepTime\nDepDelay\nDepDelayMinutes\nDepDel15\nDepartureDelayGroups\nDepTimeBlk\nTaxiOut\n…\nDiv1TotalGTime\nDiv1LongestGTime\nDiv1WheelsOff\nDiv1TailNum\nDiv2Airport\nDiv2AirportID\nDiv2AirportSeqID\nDiv2WheelsOn\nDiv2TotalGTime\nDiv2LongestGTime\nDiv2WheelsOff\nDiv2TailNum\nDiv3Airport\nDiv3AirportID\nDiv3AirportSeqID\nDiv3WheelsOn\nDiv3TotalGTime\nDiv3LongestGTime\nDiv3WheelsOff\nDiv3TailNum\nDiv4Airport\nDiv4AirportID\nDiv4AirportSeqID\nDiv4WheelsOn\nDiv4TotalGTime\nDiv4LongestGTime\nDiv4WheelsOff\nDiv4TailNum\nDiv5Airport\nDiv5AirportID\nDiv5AirportSeqID\nDiv5WheelsOn\nDiv5TotalGTime\nDiv5LongestGTime\nDiv5WheelsOff\nDiv5TailNum\n\n\n\ni64\ni64\ni64\ni64\ni64\nstr\nstr\ni64\nstr\nstr\ni64\ni64\ni64\ni64\nstr\nstr\nstr\ni64\nstr\ni64\ni64\ni64\ni64\nstr\nstr\nstr\ni64\nstr\ni64\ni64\nstr\nf64\nf64\nf64\ni64\nstr\nf64\n…\nstr\nstr\nstr\nstr\nstr\nstr\nstr\nstr\nstr\nstr\nstr\nstr\nstr\nstr\nstr\nstr\nstr\nstr\nstr\nstr\nstr\nstr\nstr\nstr\nstr\nstr\nstr\nstr\nstr\nstr\nstr\nstr\nstr\nstr\nstr\nstr\nstr\n\n\n\n\n2022\n1\n1\n14\n5\n\"2022-01-14\"\n\"YX\"\n20452\n\"YX\"\n\"N119HQ\"\n4879\n11066\n1106606\n31066\n\"CMH\"\n\"Columbus, OH\"\n\"OH\"\n39\n\"Ohio\"\n44\n11278\n1127805\n30852\n\"DCA\"\n\"Washington, DC…\n\"VA\"\n51\n\"Virginia\"\n38\n1224\n\"1221\"\n-3.0\n0.0\n0.0\n-1\n\"1200-1259\"\n28.0\n…\nnull\nnull\n\"\"\n\"\"\n\"\"\nnull\nnull\n\"\"\nnull\nnull\n\"\"\n\"\"\n\"\"\nnull\nnull\n\"\"\nnull\nnull\n\"\"\n\"\"\n\"\"\nnull\nnull\n\"\"\nnull\nnull\n\"\"\n\"\"\n\"\"\nnull\nnull\n\"\"\nnull\nnull\n\"\"\n\"\"\nnull\n\n\n2022\n1\n1\n15\n6\n\"2022-01-15\"\n\"YX\"\n20452\n\"YX\"\n\"N122HQ\"\n4879\n11066\n1106606\n31066\n\"CMH\"\n\"Columbus, OH\"\n\"OH\"\n39\n\"Ohio\"\n44\n11278\n1127805\n30852\n\"DCA\"\n\"Washington, DC…\n\"VA\"\n51\n\"Virginia\"\n38\n1224\n\"1214\"\n-10.0\n0.0\n0.0\n-1\n\"1200-1259\"\n19.0\n…\nnull\nnull\n\"\"\n\"\"\n\"\"\nnull\nnull\n\"\"\nnull\nnull\n\"\"\n\"\"\n\"\"\nnull\nnull\n\"\"\nnull\nnull\n\"\"\n\"\"\n\"\"\nnull\nnull\n\"\"\nnull\nnull\n\"\"\n\"\"\n\"\"\nnull\nnull\n\"\"\nnull\nnull\n\"\"\n\"\"\nnull\n\n\n2022\n1\n1\n16\n7\n\"2022-01-16\"\n\"YX\"\n20452\n\"YX\"\n\"N412YX\"\n4879\n11066\n1106606\n31066\n\"CMH\"\n\"Columbus, OH\"\n\"OH\"\n39\n\"Ohio\"\n44\n11278\n1127805\n30852\n\"DCA\"\n\"Washington, DC…\n\"VA\"\n51\n\"Virginia\"\n38\n1224\n\"1218\"\n-6.0\n0.0\n0.0\n-1\n\"1200-1259\"\n16.0\n…\nnull\nnull\n\"\"\n\"\"\n\"\"\nnull\nnull\n\"\"\nnull\nnull\n\"\"\n\"\"\n\"\"\nnull\nnull\n\"\"\nnull\nnull\n\"\"\n\"\"\n\"\"\nnull\nnull\n\"\"\nnull\nnull\n\"\"\n\"\"\n\"\"\nnull\nnull\n\"\"\nnull\nnull\n\"\"\n\"\"\nnull\n\n\n2022\n1\n1\n17\n1\n\"2022-01-17\"\n\"YX\"\n20452\n\"YX\"\n\"N405YX\"\n4879\n11066\n1106606\n31066\n\"CMH\"\n\"Columbus, OH\"\n\"OH\"\n39\n\"Ohio\"\n44\n11278\n1127805\n30852\n\"DCA\"\n\"Washington, DC…\n\"VA\"\n51\n\"Virginia\"\n38\n1224\n\"1217\"\n-7.0\n0.0\n0.0\n-1\n\"1200-1259\"\n32.0\n…\nnull\nnull\n\"\"\n\"\"\n\"\"\nnull\nnull\n\"\"\nnull\nnull\n\"\"\n\"\"\n\"\"\nnull\nnull\n\"\"\nnull\nnull\n\"\"\n\"\"\n\"\"\nnull\nnull\n\"\"\nnull\nnull\n\"\"\n\"\"\n\"\"\nnull\nnull\n\"\"\nnull\nnull\n\"\"\n\"\"\nnull\n\n\n2022\n1\n1\n18\n2\n\"2022-01-18\"\n\"YX\"\n20452\n\"YX\"\n\"N420YX\"\n4879\n11066\n1106606\n31066\n\"CMH\"\n\"Columbus, OH\"\n\"OH\"\n39\n\"Ohio\"\n44\n11278\n1127805\n30852\n\"DCA\"\n\"Washington, DC…\n\"VA\"\n51\n\"Virginia\"\n38\n1224\n\"1218\"\n-6.0\n0.0\n0.0\n-1\n\"1200-1259\"\n11.0\n…\nnull\nnull\n\"\"\n\"\"\n\"\"\nnull\nnull\n\"\"\nnull\nnull\n\"\"\n\"\"\n\"\"\nnull\nnull\n\"\"\nnull\nnull\n\"\"\n\"\"\n\"\"\nnull\nnull\n\"\"\nnull\nnull\n\"\"\n\"\"\n\"\"\nnull\nnull\n\"\"\nnull\nnull\n\"\"\n\"\"\nnull\n\n\n\n\n\n\n\nflights.shape\n\n(999, 110)\n\n\n\ntype(flights[:, 'Month'])\n\npolars.series.series.Series"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Preface",
    "section": "",
    "text": "Preface\nThis is a Quarto book.\nTo learn more about Quarto books visit https://quarto.org/docs/books.\n\n1 + 1\n\n[1] 2"
  }
]