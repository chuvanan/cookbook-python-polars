# Data manipulation

```{python}
#| include: false
import polars as pl
```

To showcase the robust syntax and efficiency of the polars package, we will leverage a moderately-sized dataset, comprising approximately 530,000 rows.

```{python}
full_flights = pl.read_csv('./data/On_Time_Reporting_Carrier_On_Time_Performance_(1987_present)_2022_1.csv')
full_flights.shape
```

```{python}
full_flights.estimated_size('mb')
```

## Data type conversion

In R, you work with four main types of vectors: logical, integer, double, and character. When you mix different types, they get automatically adjusted in a specific order: character → double → integer → logical. If you want to intentionally adjust them, you can use functions like `as.integer()`, `as.double()`, `as.logical()`, and `as.character()`.

On the other hand, in polars, there's a wider variety of data types, and you need to purposefully adjust them when needed.

```{python}
full_flights['Year'].dtype
```

```{python}
full_flights = full_flights.with_columns(
    pl.col('Year').cast(pl.Utf8)
)
full_flights['Year'].dtype
```

## Introduction to methods

## Single table operation


### Filtering rows

* Retrieving all flights from Oihio (filtering based on one condition)

```{python}
# recommended way
flights_from_ohio = full_flights.filter(pl.col('OriginStateName') == 'Ohio')

# alternative way (not recommended)
# flights_from_ohio = full_flights[full_flights['OriginStateName'] == 'Ohio']

flights_from_ohio['OriginStateName'].value_counts()
```

* Obtaining all flights from Ohio to Virginia (filtering based on multiple conditions)

```{python}
# note that each predicate must be enclosed within parentheses
flights_from_ohio_to_virginia = full_flights.filter(
    (pl.col('OriginStateName') == 'Ohio') & (pl.col('DestStateName') == 'Virginia')
)

# you can replace `&` with `,` to avoid parentheses
# flights_from_ohio_to_virginia = full_flights.filter(
#     pl.col('OriginStateName') == 'Ohio', 
#     pl.col('DestStateName') == 'Virginia'
# )

flights_from_ohio_to_virginia['DestStateName'].value_counts()
```

* Fetching all flights from Ohito to any state except Virginia (filtering based on negative condition)

```{python}
flights_from_ohio_except_to_virginia = full_flights.filter(
    pl.col('OriginStateName') == 'Ohio', 
    ~(pl.col('DestStateName') == 'Virginia')
)
flights_from_ohio_except_to_virginia['DestStateName'].value_counts(sort=True).head()
```

* Why using the `.filter()` method? The reason is to leverage lazy execution and query optimization

```{python}
%%time
# this code is optimized by polars query engine before reading any data into memory
lazy_stmt = (
    pl.scan_csv('./data/On_Time_Reporting_Carrier_On_Time_Performance_(1987_present)_2022_1.csv')
    .filter(pl.col('OriginStateName') == 'Ohio')
    .collect()
)
```

```{python}
%%time
eager_stmt = (
    pl.read_csv('./data/On_Time_Reporting_Carrier_On_Time_Performance_(1987_present)_2022_1.csv')
    .filter(pl.col('OriginStateName') == 'Ohio')
)
```

### Selecting columns

Selecting variables within a DataFrame in polars is highly expressive, offering flexibility based on either variable names or types. Here's a breakdown from simple to complex:

* Utilizing the `select` function to create a DataFrame from Series:

```{python}
foo = pl.Series('foo', [1, 2, 3])
bar = pl.Series('bar', [4, 5, 6])

pl.select(mmin = pl.min_horizontal(foo, bar))
```

* Selecting columns by names:


```{python}
full_flights.select(['FlightDate', 'Tail_Number']).head(3)
# or 
# full_flights.select(pl.col(['FlightDate', 'Tail_Number'])).head(3)
```

* Selecting columns by types:

```{python}
# select all integer columns
full_flights.select(pl.col(pl.Int64)).head(3)
```

```{python}
# select all numeric columns
full_flights.select(
    pl.col(pl.Int64),
    pl.col(pl.Float64)
).head(3)
```

* Complex column selection with Selectors, analogous to dplyr's [selection helpers](https://dplyr.tidyverse.org/reference/select.html)

```{python}
import polars.selectors as cs

# match all variables. Same as dplyr's `everything()`
full_flights.select(cs.all()).head(3)
```


```{python}
# match variables by prefix or suffix
full_flights.select(
    cs.starts_with('Flight') | cs.ends_with('Delay')
).head(3)
```

A detailed comparison between dplyr and polars column selection helpers:

| dplyr action                                                               	| dplyr function                   	| polars function    	|
|----------------------------------------------------------------------------	|----------------------------------	|--------------------	|
| matches all columns                                                        	| `everything()`                   	| `cs.all()`         	|
| matches all integer columns                                                	| `where(is.integer())`            	| `cs.integer()`     	|
| matches all factor/categorical columns                                     	| `where(is.factor())`             	| `cs.categorical()` 	|
| matches all float columns                                                  	| `where(is.double())`             	| `cs.float()`       	|
| matches all string columns                                                 	| `where(is.character())`          	| `cs.string()`      	|
| matches all date columns                                                   	| `where(\(x) class(x) == "Date")` 	| `cs.date()`        	|
| match all datetime columns                                                 	| not available                    	| `cs.datetime()`    	|
| match all time columns                                                     	| not available                    	| `cs.time()`        	|
| match all date/datetime columns                                            	| not available                    	| `cs.temporal()`    	|
| select the last column                                                     	| `last_col()`                     	| `cs.last()`        	|
| starts with a prefix                                                       	| `starts_with()`                  	| `cs.starts_with()` 	|
| ends with a suffix                                                         	| `end_with()`                     	| `cs.ends_with()`   	|
| contains a literal string                                                  	| `contains()`                     	| `cs.contains()`    	|
| matches a regular expression                                               	| `matches()`                      	| `cs.matches()`     	|
| takes the complement of a set of columns                                   	| `!`                              	| `~`                	|
| takes the difference between a set of columns                              	| not available                    	| `-`                	|
| selects a range of consecutive columns                                     	| `col1:col10`                     	| not available      	|
| matches all column names in a list, no error thrown for non-existing names 	| `any_of()`                       	| not available      	|

### Modify/Add column


### Rename column


### Remove column


### Aggregation by group


### Sort a DataFrame

## Two tables operation


### Join DataFrames


### Concatenate DataFrames


## Pivot a DataFrame


## Dealing with missing values


## Strings methods

## Handling datetime

## Other useful methods