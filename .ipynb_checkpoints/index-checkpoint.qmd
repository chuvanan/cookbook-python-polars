# Preface {.unnumbered}

This book stems from a series of [blog posts](https://www.emilyriederer.com/post/py-rgo-polars/) recommending a Pythonic data science stack that mirrors the comfort and familiarity of R's
tidyverse packages. Specifically, this book explores the `polars` library - a rising star in the DataFrame space (alongside established players like Pandas, Dask, Modin, Ray, Vaex).

In short, polars is described as a [query engine with a DataFrame front-end](https://pola.rs/posts/polars_birds_eye_view/). It offers a rich set of intuitive functions and principled workflows for 
data manipulation and analysis. Designed from the ground up with performance in mind, polars is also known for its [lightning-fast execution speed](https://www.ritchievink.com/blog/2021/02/28/i-wrote-one-of-the-fastest-dataframe-libraries/). While rapidly gaining popularity, polars is still in its early phase and under active development.

The bulk of this book features structured examples of data wrangling tasks showcasing idiomatic polars and corresponding dplyr/tidyr code for comparison. Examples might include commentary on the API choices.


```{python}
#| fig-align: center
#| code-fold: true
import polars as pl
from lets_plot import *
LetsPlot.setup_html(isolated_frame=False, offline=True, no_js=True, show_status=False)

stars = (
    pl.read_csv('./data/star-history-2024215.csv', has_header=False)
    .rename({'column_1': 'project', 'column_2': 'date', 'column_3': 'stars'})
    .with_columns(
        pl.col('date').str.slice(0, 15).str.to_date('%a %b %d %Y').alias('short_date')
    )
    .sort('short_date')
)

(
    ggplot(stars.to_pandas(), aes(x='short_date', y='stars', color='project')) +
    geom_line(size=1.5) +
    labs(y='Github stars', title='Polars is surging in popularity') +
    scale_x_datetime(name='Date') +
    theme(legend_title=element_blank(), 
          text=element_text(family='Roboto Condensed', size=15),
         plot_title=element_text(face='bold', size=18)) +
    scale_y_continuous(breaks=[0, 10_000, 20_000, 30_000, 40_000], format='0,', expand=[0.01,0.01]) +
    ggsize(700,380)
)
```


## Run the code from this book

* Clone the book repository:

```bash
git clone https://github.com/chuvanan/cookbook-python-polars.git python-polars-cookbook
cd python-polars-cookbook
python3 -m venv env
source env/bin/activate
```

* You can install the exact packages that the book uses with the `requirements.txt` file:

```bash
python3 -m pip install -r requirements.txt
```

* Download the data (source: [Reporting carrier on-time performance](https://transtats.bts.gov/TableInfo.asp?gnoyr_VQ=FGJ&QO_fu146_anzr=b0-gvzr&V0s1_b0yB=D))

```bash
python download-data.py
```

## Credit

This work builds upon the organizational style of [https://ddotta.github.io/cookbook-rpolars/](https://ddotta.github.io/cookbook-rpolars/) but the content and examples are tailored to Python's polars library. So credit goes to [Damien Dotta](https://github.com/ddotta), all remaining errors are mine.

## Contributing

Feel free to open an [issue](https://github.com/chuvanan/cookbook-python-polars/issues) if you notice any problems with this book. It's free and open source, and your feedback is valuable to me.